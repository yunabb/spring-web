<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:property-placeholder location="classpath:spring/db.properties"/>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${db.driver-class-name}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean>
	
	<!-- 커넥션풀 생성 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:mybatis/mappers/*.xml" />
		<property name="typeAliasesPackage" value="com.sample.vo,com.sample.dto" />
	</bean>
	
	<mybatis-spring:scan base-package="com.sample.mapper"/>
	
	<!-- 
		@Transactional을 이용하는 선언적 트랜잭션 처리
			- 트랜잭션매니저를 스프링컨테이너의 빈으로 등록한다.
				<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
					<property name="dataSource" ref="dateSource" />
				</bean>
			- @Transactional 어노테이션을 활성화시킨다.
				<tx:annotation-driven transaction-manager="transactionManager"/>
				* 어노테이션을 활성화란?
					<tx:annotation-driven /> 태그가 @Transactional 어노테이션을 감지하고,
					해당 어노테이션이 사용된 클래스나 메소드가 실행될 때 자동으로 트랜잭션매니저를 실행시키는 객체를 스프링컨테이너의 빈으로 등록시킨다.
	 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
</beans>
