<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 
		<mvc:annotation-driven> 태그는
			spring mvc 관련 어노테이션을 감지/분석해서 적절한 작업을 수행하는 객체를 스프링의 빈으로 등록시킨다.
			
		<mvc:argument-resolvers> 태그는
			사용자정의 HandlerMethodArgumentResolver를 추가시킨다.
			* LoginUserHandlerMethodArgumentResolver는 요청핸들러 메소드의 매개변수에 @LoginUser 어노테이션이 지정되어 있으면
			  세션에서 로그인된 사용자정보를 조회해서 매개변수에 전달한다.
		
	 -->
	<mvc:annotation-driven >
		<mvc:argument-resolvers>
			<bean class="com.sample.web.resolver.LoginUserHandlerMethodArgumentResolver" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
	<!-- 
		사용자정의 인터셉터를 스프링 컨테이너의 빈으로 등록한다.
	 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**/*"/>
			<mvc:exclude-mapping path="/home"/>
			<mvc:exclude-mapping path="/register"/>
			<mvc:exclude-mapping path="/success"/>
			<mvc:exclude-mapping path="/login"/>
			<bean class="com.sample.web.interceptor.LoginCheckHandlerInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 
		<mvc:view-resolvers> 태그는
			spring mvc가 지원하는 다양한 뷰-템플릿 기술(모델의 데이터를 표현하는 기술)에 대한 설정을 지원하는 태그다.
	 -->
	<mvc:view-resolvers>
		<!-- 
			<mvc:jsp> 태그는
				Controller의 요청핸들러 메소드가 반환하는 뷰 이름("home")을 실제 JSP 경로에 맞게
				prefix(접두사)="/WEB-INF/views/"와 suffix(접미사)=".jsp"를 지정한다.
		 -->
		<mvc:jsp prefix="/WEB-INF/views/"/>
	</mvc:view-resolvers>
		<!-- 
			<context:component-scan /> 태그는
				com.sample.web 패키지에서 클래스를 스캔해서 스프링 컨테이너의 빈으로 등록시킨다.
				이 애플리케이션에서 com.sample.web.controller 클래스를 스캔해서 스프링 컨테이너의 빈으로 등록시킨다.
		 -->
	<context:component-scan base-package="com.sample.web" />
	
	<!-- 
		multipart 요청(첨부파일 업로드 요청)을 지원하는 MultipartResolver 객체를 스프링 컨테이너의 빈으로 등록시킨다.
		반드시 id를 "multipartResolver"로 지정해야 한다. (몇몇 bean의 id에 대해서는 스프링이 지정해놈-디스패처서블릿에 정의됨)
	 -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<property name="defaultEncoding" value="UTF-8" />
	 	<!-- 한번에 업로드할 수 있는 최대 사이즈 (-1로 설정하면 무한대, 10485760 = 10mb)-->
	 	<property name="maxUploadSize" value="10485760"/>
	 	<!-- 파일당 최대 사이즈 -->
	 	<property name="maxUploadSizePerFile" value="10485760" />
	 </bean>
</beans>
